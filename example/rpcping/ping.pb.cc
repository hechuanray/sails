// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ping.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ping.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sails {

namespace {

const ::google::protobuf::Descriptor* PingMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingMessage_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* PingService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ping_2eproto() {
  protobuf_AddDesc_ping_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ping.proto");
  GOOGLE_CHECK(file != NULL);
  PingMessage_descriptor_ = file->message_type(0);
  static const int PingMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingMessage, time_),
  };
  PingMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingMessage_descriptor_,
      PingMessage::default_instance_,
      PingMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingMessage));
  PingService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ping_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingMessage_descriptor_, &PingMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ping_2eproto() {
  delete PingMessage::default_instance_;
  delete PingMessage_reflection_;
}

void protobuf_AddDesc_ping_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nping.proto\022\005sails\"\033\n\013PingMessage\022\014\n\004ti"
    "me\030\001 \002(\0032=\n\013PingService\022.\n\004ping\022\022.sails."
    "PingMessage\032\022.sails.PingMessageB\026\n\016com.x"
    "iaoji.net\200\001\001\210\001\001", 135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ping.proto", &protobuf_RegisterTypes);
  PingMessage::default_instance_ = new PingMessage();
  PingMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ping_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ping_2eproto {
  StaticDescriptorInitializer_ping_2eproto() {
    protobuf_AddDesc_ping_2eproto();
  }
} static_descriptor_initializer_ping_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PingMessage::kTimeFieldNumber;
#endif  // !_MSC_VER

PingMessage::PingMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PingMessage::InitAsDefaultInstance() {
}

PingMessage::PingMessage(const PingMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PingMessage::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingMessage::~PingMessage() {
  SharedDtor();
}

void PingMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingMessage_descriptor_;
}

const PingMessage& PingMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ping_2eproto();
  return *default_instance_;
}

PingMessage* PingMessage::default_instance_ = NULL;

PingMessage* PingMessage::New() const {
  return new PingMessage;
}

void PingMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingMessage::MergeFrom(const PingMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingMessage::CopyFrom(const PingMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PingMessage::Swap(PingMessage* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingMessage_descriptor_;
  metadata.reflection = PingMessage_reflection_;
  return metadata;
}


// ===================================================================

PingService::~PingService() {}

const ::google::protobuf::ServiceDescriptor* PingService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* PingService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingService_descriptor_;
}

void PingService::ping(::google::protobuf::RpcController* controller,
                         const ::sails::PingMessage*,
                         ::sails::PingMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ping() not implemented.");
  done->Run();
}

void PingService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), PingService_descriptor_);
  switch(method->index()) {
    case 0:
      ping(controller,
             ::google::protobuf::down_cast<const ::sails::PingMessage*>(request),
             ::google::protobuf::down_cast< ::sails::PingMessage*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PingService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sails::PingMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& PingService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sails::PingMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

PingService_Stub::PingService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PingService_Stub::PingService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PingService_Stub::~PingService_Stub() {
  if (owns_channel_) delete channel_;
}

void PingService_Stub::ping(::google::protobuf::RpcController* controller,
                              const ::sails::PingMessage* request,
                              ::sails::PingMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace sails

// @@protoc_insertion_point(global_scope)
